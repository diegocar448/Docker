############################################################################
############################################################################
	
	Docker composer

############################################################################
############################################################################


Definição 

Docker Compose é uma ferramenta desenvolvida para ajudar a definir e compartilhar 
aplicativos com vários contêineres. Com o Compose, você pode criar um arquivo YAML para definir os serviços
e com um único comando, pode rodar todos os contêineres ou para-los.

https://hub.docker.com/_/adminer

## instalar docker-compose
apt-get install -y docker-compose


############################################################################
############################################################################
	
	Exemplo prático

############################################################################
############################################################################

## Criar nova pasta dentro de /data/ e abri-la
mkdir mysql-C
cd mysql-C


## Criar nova pasta dentro de / e abri-la
mkdir compose
cd compose

##criar com nano o docker-compose.yml
#conteúdo

->


version: '3.8'

services:
  mysqlsrv:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "Senha123"
      MYSQL_DATABASE: "testedb"
    ports:
      - "3306:3306"
    volumes:
      - /data/mysql-C:/var/lib/mysql
    networks:
      - minha-rede

  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - minha-rede

networks: 
  minha-rede:
    driver: bridge


<-

## criando mysql /adminer
docker-compose up -d


## Configurando o mysql na vm

docker exec -ti 78bb bash
mysql


->





CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';

GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' WITH GRANT OPTION;

CREATE USER 'username'@'%' IDENTIFIED BY 'password';

GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;

FLUSH PRIVILEGES;






<-

# removendo todas imagens
docker rmi -f $(docker image ls -a -q)









############################################################################
############################################################################
	
	Exemplo PHP-APACHE-MYSQL

############################################################################
############################################################################

## criar pasta php dentro de /data/
mkdir php
cd php

## criar arquivo index e adicione o conteúdo 
nano index.php


->




<html>

<head>
<title>Exemplo PHP</title>
</head>


<?php
ini_set("display_errors", 1);
header('Content-Type: text/html; charset=iso-8859-1');



echo 'Versao Atual do PHP: ' . phpversion() . '<br>';

$servername = "db";
$username = "root";
$password = "Senha123";
$database = "testedb";

// Criar conexão


$link = new mysqli($servername, $username, $password, $database);

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT * FROM tabela_exemplo";

if ($result = mysqli_query($link, $query)) {

    
    while ($row = mysqli_fetch_assoc($result)) {
        printf ("%s %s %s <br>", $row["nome"], $row["cidade"], $row["salario"]);
    }

    
    mysqli_free_result($result);
}


mysqli_close($link);

?>

</html>



<-


## criar pasta admin dentro da pasta php e criar o arquivo uploads.ini e adicionar seu conteúdo
mkdir admin &&
cd admin &&
nano uploads.ini


->





file_uploads = On
memory_limit = 500M
upload_max_filesize = 500M
post_max_size = 500M
max_execution_time = 600
max_file_uploads = 50000
max_execution_time = 5000
max_input_time = 5000



<-



## abrir pasta /compose/ e criar a pasta php-mysql e abri-la, e criar o arquivo docker-compose.yml e adicionar seu conteúdo
cd /compose/ && mkdir php-mysql && cd php-mysql && nano docker-compose.yml




->



version: "3.7"

services:
  web:
    image: webdevops/php-apache:alpine-php7
    ports:
      - "4500:80"
    volumes:
      - /data/php/:/app

    networks:
      - minha-rede

  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "Senha123"
      MYSQL_DATABASE: "testedb"
    ports:
      - "3306:3306"
    volumes:
      - /data/mysql-C:/var/lib/mysql

    networks:
      - minha-rede

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      MYSQL_ROOT_PASSWORD: "Senha123"
    ports:
      - "8080:80"
    volumes:
      - /data/php/admin/uploads.ini:/usr/local/etc/php/conf.d/php-phpmyadmin.ini

    networks:
      - minha-rede

networks:
   minha-rede:
     driver: bridge





<-


## agora vamos subir o serviço 
docker-compose up














############################################################################
############################################################################
	
	Utilizando exemplos do GitHub oficial

############################################################################
############################################################################

# removendo todas imagens
docker rmi -f $(docker image ls -a -q)


## Criar pasta cloud em /compose/, acessá-la e criar o arquivo docker-compose.yml adicionando seu conteúdo 
## https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/docker-compose.yaml
mkdir cloud &&
cd cloud &&
nano docker-compose.yml

->

version: '3.7'
services:
  nc:
    image: nextcloud:apache
    restart: always
    ports:
      - 80:80
    volumes:
      - nc_data:/var/www/html
    networks:
      - redisnet
      - dbnet
    environment:
      - REDIS_HOST=redis
      - MYSQL_HOST=db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=nextcloud
  redis:
    image: redis:alpine
    restart: always
    networks:
      - redisnet
    expose:
      - 6379
  db:
    image: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --skip-innodb-read-only-compressed
    restart: always
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - dbnet
    environment:
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_ROOT_PASSWORD=nextcloud
      - MYSQL_PASSWORD=nextcloud
    expose:
      - 3306
volumes:
  db_data:
  nc_data:
networks:
  dbnet:
  redisnet:


<-

## rodando docker-compose.yml
docker-compose up -d


## endereço onde fica o cloud pessoal
/var/lib/docker/volumes/cloud_db_data/_data/

## para dar um down nos containers precisamos executar na pasta de seu docker-compose.yml /compose/cloud/
docker-compose down