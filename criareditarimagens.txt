## criando imagem ##
docker run -dti --name ubuntu-python ubuntu

## executando bash ##
docker exec -ti ubuntu-python bash

## dentro do bash baixamos o python e o nano##
apt update
apt install -y python3 nano
apt clean


## nano salvar e sair ##
Ctrl+O  depois Ctrl+X para sair

## vamos executar dentro do ubuntu-python ##
docker exec -ti ubuntu-python python3 /opt/app.py

## Criar imagem a partir do docker-file ##
## parando o ubuntu-python ##
## sequencia de comandos ##
docker stop ubuntu-python
docker rm ubuntu-python

mkdir /images
cd /images/
mkdir ubuntu-python
cd ubuntu-python
nano app.py
nano dockerfile

-> conteúdo dockerfile

FROM ubuntu

RUN apt update && apt install -y python3 && apt clean

COPY app.py /opt/app.py

CMD python3 /opt/app.py


<-




## agora fará o builder setando o com o nome ubuntu-python ##
docker build . -t ubuntu-python

## agora listamos nossas images ##
docker images

## agora executamos o container setando o name ##
docker run -ti --name meu-app ubuntu-python











############################################################################
############################################################################
	
	Criando um webServer docker

############################################################################
############################################################################

mkdir debian-apache
cd debian-apache
mkdir site
cd site

## baixar site com wget ##
wget http://site1368633667.hospedagemdesites.ws/site1.zip
unzip site1.zip
rm site1.zip

## compactar em um tar, todos arquivos em um tar e copia-lo para a pasta anterior##
tar -czf site.tar ./
cp site.tar ../

## remover pasta e todo conteúdo ##
rm -Rf site

## agora criamos o dockerfile com nano ##
nano Dockerfile


## conteúdo do Dockerfile ##
##Configurar variáveis do sistema após RUN
## ENV APACHE_LOCK_DIR="var/lock" (Evitar que haja mais de uma execução do apache no mesmo container)
## ENV APACHE_PID_FILE="var/run/apache2.pid" (Especifica onde ele estará)
## ENV APACHE_RUN_USER="www-data" (o usuario que vai executar a instancia do apache)
## ENV APACHE_RUN_GROUP="www-data" (o grupo que vai executar a instancia do apache)
## ENV APACHE_LOG_DIR="/var/log/apache2" (diretório de log)
## VOLUME vamos especificar serão salvos os dados
->


FROM debian

RUN apt-get update && apt-get install -y apache2 && apt-get clean

ENV APACHE_LOCK_DIR="var/lock"
ENV APACHE_PID_FILE="var/run/apache2.pid"
ENV APACHE_RUN_USER="www-data"
ENV APACHE_RUN_GROUP="www-data"
ENV APACHE_LOG_DIR="/var/log/apache2"

ADD site.tar /var/www/html

LABEL description - "Apache webserver 1.0"

VOLUME /var/www/html

EXPOSE 80

ENTRYPOINT ["/usr/sbin/apachectl"]

CMD ["-D", "FOREGROUND"]





<-

Ctrl+o && Ctrl+x



## agora vamos gerar a imagem debian-apache versão 1.0 ##
docker image build -t debian-apache:1.0 .
docker images

## rodamos após build ##
docker run -dti -p 80:80 --name meu-apache debian-apache:1.0



############################################################################
############################################################################
	
	Utilizando uma imagem do...

############################################################################
############################################################################



## baixando python ##
docker pull python

## Listamos as images ##
docker images

## pasta para python ##
mkdir python
cd python
nano app.py
Ctrl+o Ctrl+x

## criamos o Dockerfile ##
nano Dockerfile



## conteúdo do Dockerfile ##

->

FROM python

WORKDIR /usr/src/app

COPY app.py /usr/src/app

CMD ["python", "./app.py"]

<-


## agora vamos gerar/builder a imagem ##
docker image build -t app-python:1.0 .

## rodando docker ##
docker run -ti --name runapp1 app-python:1.0



############################################################################
############################################################################
	
	Criando uma imagem Multistage

############################################################################
############################################################################


## adicionar pasta para golang ##
mkdir go && cd go
docker pull alpine &&
docker pull golang



## adicionando o golang no alpine reduzimos o tamanho ##
## criando app em golang ##
nano app.go


->
package main
import(
"fmt"
)

func main(){
fmt.PrintLn("Qual seu nome:?")
var name string
fmt.ScanLn(&name)
fmt.PrinLn("Oi, %s! Eu sou a linguagem Go!", name)
}

<-

## Agora vamos criar o Dockerfile ##
nano Dockerfile

## primeira parte é para gerar o binário golang ##
## Usamos o RUN porque vamos transformar o script em um arquivo binário ##



## na segunda parte ele criará o alpine ##


->
FROM golang as exec

COPY app.go /go/src/app/

#ENV GO111MODULE=auto

WORKDIR	 /go/src/app/

RUN go build -o app.go .

FROM alpine

WORKDIR /appexec

COPY --from=exec /go/src/app /appexec
RUN chmod -R 755 /appexec
ENTRYPOINT ./app.go

<-


## agora fazemos o build ##
docker image build -t app-go:1.0 .



## caso ocorra falha service inactive leftspace ##
service docker start
start docker.service
reboot
##################################################


## Rodando app.go ##
docker run -ti --name meuappOK app-go:1.0


## Removendo imagem app-go ##
docker rmi -f d4f499f5e684

## logando conta docker hub ##
docker login

## aqui vamos build a image para o nosso docker hub remoto ##
docker build . -t diegocar448/my-go-app:1.0

## Aqui enviamos para o docker hub ##
docker push diegocar448/my-go-app:1.0

## baixar do remoto para o local passando a versão ##
docker pull diegocar448/my-go-app:1.0


############################################################################
############################################################################
	
	Realizando o upload de imagens para o Docker Hub

############################################################################
############################################################################


## instalar docker na outra VM
snap install docker 

##instalar registry
docker run -d -p 5000:5000 --restart=always --name registry registry:2







