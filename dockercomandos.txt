## olhar containers ##
docker ps
docker ps -a

## Listar Imagens ##
docker images

## removendo image docker ##
docker rmi hello-world

## removendo container ##
docker rm id_do_container

## buscar, baixar e instalar imagem ##
docker run -dti centos

## parando container ##
docker stop 922

## dando apelido a imagem ##
docker run -dti --name Ubuntu-A ubuntu

## copiando arquivos no docker (da  maquina fisica para o container)##
docker cp MeuArquivo.txt Ubuntu-A:/destino

## copiando arquivos no docker (do container para a maquina fisica)##
docker cp Ubuntu-A:/destino/Meuzip.zip Zipcopia.zip

## executar listagem dentro do images/Ubuntu-A ##
docker exec Ubuntu-A ls /destino -l

## entrando no container ##
docker exec -ti Ubuntu-A /bin/bash

## install zip ##
apt -y install zip

## zip ##
zip Meuzip.zip *.txt

## unzip ##
unzip Meuzip.zip

## aqui vamos baixar uma image pegando uma versão especificar ##
docker pull debian:9

## criando container mysql ##
docker pull mysql

## rodamos o container mysql ##
## especificando a variavel de ambiente flag -e MYSQL_ROOT_PASSWORD=senha ##
## especificando o nome do container --name mysql-A ##
## -d flag para deixar rodando em background ##
## -p flag para liberar porta 3306:3306 ##
docker run -e MYSQL_ROOT_PASSWORD=senha --name mysql-A -d -p 3306:3306 mysql

## rodar um bash no container mysql ## 
docker exec -it mysql-A bash

## chamar o comando mysql passando o protocolo ##
mysql -u root -p --protocol=tcp

## listar as informações mysql ##
docker inspect mysql-A

## instalar mysql-client ##
apt -y install mysql-client

## podendo acessa-lo da maquina fisica ##
mysql -u root -p --protocol=tcp

## listar informações network ##
ip a


## configuração ##

Docker executando mysql 8.X. Eu loguei no container

docker exec -it CONTAINER_ID bash
em seguida, faça login no mysql como root

mysql --user=root --password
Digite a senha do root (o padrão é 'root'). Finalmente execute:

ALTER USER 'username' IDENTIFIED WITH mysql_native_password BY 'password';


## parando container ##
docker stop mysql-A

## starting container ##
docker start mysql-A

## Listando container mesmo parados ##
docker ps -a

## renomeando container ##
docker rename nameold namenew


####################################################################################
## mount especificando local onde será salvo --volume ##
## caso o usuario crie outro container mysql passando o caminho 
	--volume ele terá as informações criadas anteriormente por outro container 
####################################################################################
docker run -e MYSQL_ROOT_PASSWORD=32658515 --name mysql-A -d -p 3306:3306 --volume=/data/mysql-A:/var/lib/mysql mysql

## login flag protocol ##
mysql -u root -p --protocol=tcp --port=3306

## criando container com type + o path antes de baixar container ##
docker run -dti --mount type=bind,src=/data/debian-A,dst=/data debian

## criando um volume para somente leitura no container ##
docker run -dti --mount type=bind,src=/data/debian-A,dst=/data,ro debian

## comando para listar todos os volumes ##
docker volume ls

## criando volume ##
docker volume create nome_do_volume

## montando o volume dentro do container ##
docker run -dti --name debian0A --mount type=volume,src=data-debian,dst=/data debian
docker run -dti --mount type=volume,src=data-debian,dst=/data --name debian-B debian

## parar e excluir container com um unico comando passando a flag -f ##
docker rm -f centos-A

## remover todos os volume do host ##
docker volume prune

## remover todos os contaners que não estão em uso ##
docker container prune

## rodando container apache ##
docker run --name apache-A -d -p 80:80 --volume=/data/apache-A:/usr/local/apache2/htdocs httpd

## agora vamos baixar o php com um apache para roda-lo ##
docker pull php:7.4-apache

## rodando container php-A para as flags -d running background -p 8080 passando a porta que irá roda-lo ##
##8080:80 pegando host na porta 80 e rodar em 8080
docker run --name php-A -d -p 8080:80 --volume=/data/php-A:/var/www/html php:7.4-apache

## docker stats container para saber o quanto de cpu, memória... esta sendo consumido ##
docker stats php-A

## setar parâmetros de consumo do container (Necessário Swap) ##
docker update php-A -m 128M --cpus 0.2
docker run --name ubuntu-C -dti -m 128M --cpus 0.2 ubuntu

## usando stress para simular processamento do container ##
stress --cpu 1 --vm-bytes 50m --vm 1 --vm-bytes 50m

## ter informações sobre o servidor ##
docker info

## acesso logs ##
docker container logs mysql-A

## listar as redes disponiveis ##
docker network ls

## verificar quais containers estão vinculados a essa rede ##
docker network inspect bridge

## entrando no bash do container ##
docker exec -ti Ubuntu-A bash

## install package ping ##
apt-get install -y iputils-ping

## criando uma rede para isolar os containers ##
docker network create minha-rede


## criando container e especificando em qual rede ele irá rodar ##
docker run -dti --name Ubuntu-A --network minha-rede ubuntu

## Verificando qual faixa de ip a rede "minha-rede" pegou ##
docker network inspect minha-rede

172.18.0.2 A
172.18.0.2 B




























